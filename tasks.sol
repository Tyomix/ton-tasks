
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract tasks {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call

    struct task {
        string name;
        uint32 timestamp;
        bool active;
    }
    uint8 numTasks=0;
    mapping (uint8 => task) tasklist;

    // Contract can have a `constructor` â€“ function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();


    }

    function newtask (string taskname) public {
        
        tvm.accept();
        //add a new task
        numTasks++;
        tasklist[numTasks]=task(taskname, now, true);

    }

    function getOpenTasksNum () public returns(uint) {
        
        tvm.accept();
        //get number of open tasks
        uint8 otasks=0;
        for (uint8 i = 1; i <= numTasks; i++)
        {
            if (tasklist[i].active) {otasks++;}
        } 
        return otasks;


    }

    function getTasks () public returns(string) {
        
        tvm.accept();
        //get open tasks names  
        string otasksnames;
        for (uint8 i = 1; i <= numTasks; i++)
        {
            if (tasklist[i].active) {
                otasksnames+=tasklist[i].name;
                otasksnames+="; ";
            }
        } 
        return otasksnames;


    }

    function getTask (uint8 taskIndex) public returns(string) {
        
        tvm.accept();
        //get task by index
        return tasklist[taskIndex].name;


    }

    function delTask (uint8 taskIndex) public {
        
        tvm.accept();
        //delete task by index
        delete tasklist[taskIndex];


    }

    function closeTask (uint8 taskIndex) public {
        
        tvm.accept();
        //close task by index
        require(tasklist[taskIndex].active, 103);
        tasklist[taskIndex].active = false;


    }

}
